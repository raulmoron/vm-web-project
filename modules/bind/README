bind

Install and enable a BIND DNS server, create and manage DNS zone files.

* `bind::server` : Main class to install and enable the server.
* `bind::server::conf` : Main definition to configure the server.
* `bind::server::file` : Definition to manage zone files.

Here is a typical LAN recursive caching DNS server configuration :

    include bind::server
    bind::server::conf { '/etc/named.conf':
        listen_on_addr    => [ 'any' ],
        listen_on_v6_addr => [ 'any' ],
        forwarders        => [ '8.8.8.8', '8.8.4.4' ],
        allow_query       => [ 'localnets' ],
        zones             => {
            'myzone.lan' => [
                'type master',
                'file "myzone.lan"',
            ],
            '1.168.192.in-addr.arpa' => [
                'type master',
                'file "1.168.192.in-addr.arpa"',
            ],
        },
    }

The zone files for the above could then be managed like this :

    bind::server::file { 'myzone.lan':
        zonedir => '/var/named/chroot/var/named',
        source  => 'puppet:///files/dns/myzone.lan',
    }
    bind::server::file { '1.168.192.in-addr.arpa':
        zonedir => '/var/named/chroot/var/named',
        source  => 'puppet:///files/dns/1.168.192.in-addr.arpa',
    }

To avoid repeating the 'zonedir' parameter each time, you can also use :

    Bind::Server::File { zonedir => '/var/named/chroot/var/named' }

Then if all source files are in the same location and named after the zone :

    bind::server::file { [ 'myzone.lan', '1.168.192.in-addr.arpa' ]:
        source_base => 'puppet:///files/dns/',
    }

Since SELinux offers a very high level of protection, chrooting is quite
redundant, so here is how to configure bind without chroot :

    class { 'bind::server': chroot => false }
    bind::server::conf { '/etc/named.conf':
        # [... same as before ...]
    },
    bind::server::file { 'myzone.lan':
        source  => 'puppet:///files/dns/myzone.lan',
    }

